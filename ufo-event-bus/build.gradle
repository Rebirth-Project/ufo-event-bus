/*
 * Copyright (C) 2021/2022 Andrea Paternesi Rebirth project
 * Modifications copyright (C) 2021/2022 Matteo Veroni Rebirth project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

plugins {
    id "signing"
    id "java-library"
    id 'maven-publish'
    id 'org.javamodularity.moduleplugin' version '1.8.12' 
    id 'net.researchgate.release' version '3.0.2'
}

group = 'it.rebirthproject'
archivesBaseName = 'ufoeventbus'

modularity.mixedJavaRelease 8

Date buildTimeAndDate = new Date()
ext {   
    buildDate = new SimpleDateFormat('dd-MM-yyyy').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

repositories {
    mavenCentral()
}

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = "UTF-8"
}

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = "UTF-8"
}

dependencies {
    api 'org.slf4j:slf4j-api:2.0.2'
    testImplementation 'ch.qos.logback:logback-classic:1.4.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

tasks.withType(Jar) {
    manifest.attributes(
            'Specification-Title': 'UFOEventBus',
            'Specification-Vendor': 'Rebirth Project',
            'Specification-Version': archiveVersion.get(),
            'Implementation-Title': 'UFOEventBus',
            'Implementation-Vendor': 'Rebirth Project',
            'Implementation-Version': archiveVersion.get(),
            'Build-Date': project.buildDate,
            'Build-Time': project.buildTime
    )
}

javadoc {
    failOnError = false
    title = "EventBus ${version} API"
    options.encoding = 'UTF-8'
    options.bottom = ''
    options.showFromPrivate()
    options.setWindowTitle("UfoEventBus JavaDoc")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")   
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource    
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

test {
    //    debug = true
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username = project.hasProperty('LocalSonatypeUsername') ? project.LocalSonatypeUsername : findProperty("sonatypeUsername")
                password = project.hasProperty('LocalSonatypePassword') ? project.LocalSonatypePassword : findProperty("sonatypePassword")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            artifact(tasks["sourcesJar"])
            artifact(tasks["javadocJar"])
            pom {
                name = 'ufoeventbus'
                description = 'UFO EventBus: Ultra Fast Object oriented event bus for Java and Android'
                url = 'https://github.com/Rebirth-Project/ufo-event-bus'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'patton73'
                        name = 'Andrea Paternesi'
                    }
                    developer {
                        id = 'mavek87'
                        name = 'Matteo Veroni'
                    }
                }
                scm {
                    url = 'https://github.com/Rebirth-Project/ufo-event-bus'
                    connection = 'scm:git://github.com:Rebirth-Project/ufo-event-bus.git'
                    developerConnection = 'scm:github.com:Rebirth-Project/ufo-event-bus.git'
                }
            }
        }
    }
}

signing {       
        //If we are in guthub then we will find those properties otherwise we are in local PC and we use directly gpg keyring (default)    
        if(project.hasProperty('signingKey') && project.hasProperty('signingPassword')) {            
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")        
            useInMemoryPgpKeys(signingKey, signingPassword)
        }                
        //sign configurations.archives  
        sign publishing.publications.mavenJava
}

release {
    failOnSnapshotDependencies = false
    git {
        requireBranch.set('') // consente di produrre release da branch != master
    }
}

//afterReleaseBuild.dependsOn publish
